{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useRef } from 'react';\nconst useFetch = (url, _options) => {\n  _s();\n  const [data, setData] = useState(null);\n  const [isPending, setIsPending] = useState(false);\n  const [error, setError] = useState(null);\n  const options = useRef(_options);\n  useEffect(() => {\n    console.log(options);\n    const controller = new AbortController();\n    const fetchData = async () => {\n      setIsPending(true);\n      try {\n        const res = await fetch(url, {\n          signal: controller.signal\n        });\n        if (!res.ok) {\n          throw new Error(res.statusTextx);\n        }\n        const json = await res.json();\n        setIsPending(false);\n        setData(json);\n        setError(null);\n      } catch (err) {\n        if (err.name === \"AbortError\") {\n          console.log(\"the fetch was aborted\");\n        } else {\n          setIsPending(false);\n          setError('could not fetch the data');\n        }\n        console.log(err.message);\n      }\n    };\n    fetchData();\n    return () => {\n      controller.abort();\n    };\n  }, [url, options]);\n  return {\n    data,\n    isPending,\n    error\n  };\n};\n_s(useFetch, \"YJbn2SmxjIGm8a9cEv3RNihI/lI=\");\nexport default useFetch;","map":{"version":3,"names":["useState","useEffect","useRef","useFetch","url","_options","_s","data","setData","isPending","setIsPending","error","setError","options","console","log","controller","AbortController","fetchData","res","fetch","signal","ok","Error","statusTextx","json","err","name","message","abort"],"sources":["/Users/btjackso/Desktop/react_tuts/tripago/src/hooks/useFetch.js"],"sourcesContent":["import { useState, useEffect, useRef } from 'react'\n\n\nconst useFetch = (url, _options) => {\n  const [data, setData] = useState(null)\n  const [isPending, setIsPending] = useState(false)\n  const [error, setError] = useState(null)\n\n  const options = useRef( _options)\n\n\n  useEffect(() => {\n    \n    console.log(options)\n\n    const controller = new AbortController()\n\n   const fetchData = async () => {\n      setIsPending(true)\n\n      try {\n        const res = await fetch(url, {signal: controller.signal})\n\n        if(!res.ok){\n            throw new Error (res.statusTextx)\n        }\n\n        const json = await res.json()\n\n        setIsPending(false)\n        setData(json)\n        setError(null)\n      \n      } catch (err) {\n        if(err.name === \"AbortError\"){\n          console.log(\"the fetch was aborted\")\n        } else {\n          setIsPending(false)\n          setError('could not fetch the data')\n\n        }\n\n        \n        console.log(err.message)\n      }\n\n      \n\n    }\n\n    fetchData()\n\n    return () => {\n        controller.abort()\n    }\n\n  }, [url, options])\n\n  return {data, isPending, error}\n\n}\n\nexport default useFetch"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAGnD,MAAMC,QAAQ,GAAGA,CAACC,GAAG,EAAEC,QAAQ,KAAK;EAAAC,EAAA;EAClC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACS,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACW,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAExC,MAAMa,OAAO,GAAGX,MAAM,CAAEG,QAAQ,CAAC;EAGjCJ,SAAS,CAAC,MAAM;IAEda,OAAO,CAACC,GAAG,CAACF,OAAO,CAAC;IAEpB,MAAMG,UAAU,GAAG,IAAIC,eAAe,CAAC,CAAC;IAEzC,MAAMC,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC3BR,YAAY,CAAC,IAAI,CAAC;MAElB,IAAI;QACF,MAAMS,GAAG,GAAG,MAAMC,KAAK,CAAChB,GAAG,EAAE;UAACiB,MAAM,EAAEL,UAAU,CAACK;QAAM,CAAC,CAAC;QAEzD,IAAG,CAACF,GAAG,CAACG,EAAE,EAAC;UACP,MAAM,IAAIC,KAAK,CAAEJ,GAAG,CAACK,WAAW,CAAC;QACrC;QAEA,MAAMC,IAAI,GAAG,MAAMN,GAAG,CAACM,IAAI,CAAC,CAAC;QAE7Bf,YAAY,CAAC,KAAK,CAAC;QACnBF,OAAO,CAACiB,IAAI,CAAC;QACbb,QAAQ,CAAC,IAAI,CAAC;MAEhB,CAAC,CAAC,OAAOc,GAAG,EAAE;QACZ,IAAGA,GAAG,CAACC,IAAI,KAAK,YAAY,EAAC;UAC3Bb,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;QACtC,CAAC,MAAM;UACLL,YAAY,CAAC,KAAK,CAAC;UACnBE,QAAQ,CAAC,0BAA0B,CAAC;QAEtC;QAGAE,OAAO,CAACC,GAAG,CAACW,GAAG,CAACE,OAAO,CAAC;MAC1B;IAIF,CAAC;IAEDV,SAAS,CAAC,CAAC;IAEX,OAAO,MAAM;MACTF,UAAU,CAACa,KAAK,CAAC,CAAC;IACtB,CAAC;EAEH,CAAC,EAAE,CAACzB,GAAG,EAAES,OAAO,CAAC,CAAC;EAElB,OAAO;IAACN,IAAI;IAAEE,SAAS;IAAEE;EAAK,CAAC;AAEjC,CAAC;AAAAL,EAAA,CAzDKH,QAAQ;AA2Dd,eAAeA,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}